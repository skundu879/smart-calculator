import { CardProps } from '@/interface/cardProps';

export const cardDetailsObj: Array<CardProps> = [
  {
    cardTitle: 'MF',
    cardDescription: 'Mutual Fund',
    cardContent:
      'Estimate your future SIP accumulation considering investment amount,interest rate, and investment period.',
    cardIcon: 'undraw_savings_re_eq4w.svg',
    cardUrl: '/MF',
    calculationDetails: {
      tabsList: ['SIP', 'LUMPSUM'],
      inputFields: {
        SIP: [
          {
            id: 1,
            title: 'investment',
            label: 'Monthly Investment (in Rupees)',
            defaultValue: 5000,
            max: 100000,
            min: 500,
            step: 500,
          },
          {
            id: 2,
            title: 'monthlyInterestRate',
            label: 'Expected return rate (per year)',
            defaultValue: 12,
            max: 50,
            min: 1,
            step: 1,
          },
          {
            id: 3,
            title: 'months',
            label: 'Time Period (in Year)',
            defaultValue: 5,
            max: 60,
            min: 0.5,
            step: 0.5,
          },
        ],
        LUMPSUM: [
          {
            id: 1,
            title: 'principal',
            label: 'Total Investment (in Rupees)',
            defaultValue: 100000,
            max: 1000000,
            step: 1000,
            min: 500,
          },
          {
            id: 2,
            title: 'decimalRate',
            label: 'Expected return rate (per year)',
            defaultValue: 12,
            max: 50,
            step: 1,
            min: 1,
          },
          {
            id: 3,
            title: 'years',
            label: 'Time Period (in Year)',
            defaultValue: 10,
            max: 60,
            step: 0.5,
            min: 0.5,
          },
        ],
      },
      formulas: {
        SIP: {
          params: ['investment', 'monthlyInterestRate', 'months'],
          formula:
            'investment * ((Math.pow(1 + (monthlyInterestRate/100/12), (months*12)) - 1) / (monthlyInterestRate/100/12)) * (1 + (monthlyInterestRate/100/12))',
        },
        LUMPSUM: {
          params: ['principal', 'decimalRate', 'years'],
          formula: 'principal * Math.pow(1 + (decimalRate/100), years)',
        },
      },
      results: {
        SIP: [
          {
            params: ['investment', 'months'],
            title: 'Principal Amount',
            lebel: 'principalAmount',
            color: 'warning',
            formula: 'investment*(months*12)',
            isGraph: true,
          },
          {
            params: ['investment', 'result', 'months'],
            title: 'Interest Earned',
            lebel: 'interestEarned',
            color: 'good',
            formula: '(result-investment*(months*12))',
            isGraph: true,
          },
          {
            params: ['investment', 'result', 'months'],
            title: 'Est. Tax',
            lebel: 'estTax',
            color: 'bad',
            formula: '(10/100)*(result-(investment*months*12)-100000)',
            isGraph: true,
          },
          {
            params: ['result', 'investment', 'months'],
            title: 'Total Amount',
            lebel: 'totalAmount',
            color: '',
            formula: 'result-((10/100)*(result-(investment*months*12)-100000))',
            isGraph: false,
          },
        ],
        LUMPSUM: [
          {
            params: ['principal'],
            title: 'Invested amount',
            lebel: 'principalAmount',
            color: 'warning',
            formula: 'principal',
            isGraph: true,
          },
          {
            params: ['principal', 'result'],
            title: 'Interest Earned',
            lebel: 'interestEarned',
            color: 'good',
            formula: '(result-principal)',
            isGraph: true,
          },
          {
            params: ['principal', 'result'],
            title: 'Est. Tax',
            lebel: 'estTax',
            color: 'bad',
            formula: '(10/100)*(result-(principal)-100000)',
            isGraph: true,
          },
          {
            params: ['principal', 'result'],
            title: 'Total Amount',
            lebel: 'totalAmount',
            color: '',
            formula: 'result-((10/100)*(result-principal-100000))',
            isGraph: false,
          },
        ],
      },
    },
  },
  {
    cardTitle: 'PF',
    cardDescription: 'Provident Fund',
    cardContent:
      'Calculate your future PF accumulation considering investment amount, interest rate, and investment period.',
    cardIcon: 'undraw_vault.svg',
    cardUrl: '/PF',
    calculationDetails: {
      tabsList: ['EPF', 'PPF', 'GPF'],
      inputFields: {
        EPF: [
          {
            id: 1,
            title: 'monthlyInvestment',
            label: 'Monthly Basic Pay + DA',
            defaultValue: 5000,
            max: 100000,
            min: 500,
            step: 500,
            isDisabled: false,
          },
          {
            id: 2,
            title: 'currentAge',
            label: 'Current Age (in Year)',
            defaultValue: 28,
            max: 55,
            min: 18,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'retirementAge',
            label: 'Retirement age (in Year)',
            defaultValue: 60,
            max: 70,
            min: 30,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'contributionPercentage',
            label: 'Contribution Percentage',
            defaultValue: 12,
            max: 20,
            min: 12,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'anualIncrementPercentage',
            label: 'Anual Increment Percentage',
            defaultValue: 5,
            max: 50,
            min: 1,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'rateOfInterest',
            label: 'Rate of Interest',
            defaultValue: 8.25,
            max: 10,
            min: 8.25,
            step: 1,
            isDisabled: true,
          },
        ],
        PPF: [
          {
            id: 1,
            title: 'annualContribution',
            label: 'Yearly Investment (in Rupees)',
            defaultValue: 10000,
            max: 1000000,
            step: 1000,
            min: 1000,
            isDisabled: false,
          },
          {
            id: 2,
            title: 'timePeriod',
            label: 'Time Period(in year)',
            defaultValue: 15,
            max: 50,
            step: 1,
            min: 15,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'rateOfInterest',
            label: 'Rate of Interest',
            defaultValue: 7.1,
            max: 10,
            step: 0.5,
            min: 7.1,
            isDisabled: true,
          },
        ],
        GPF: [
          {
            id: 1,
            title: 'monthlyInvestment',
            label: 'Monthly Basic Pay + DA',
            defaultValue: 5000,
            max: 100000,
            min: 500,
            step: 1000,
            isDisabled: false,
          },
          {
            id: 2,
            title: 'currentAge',
            label: 'Current Age (in Year)',
            defaultValue: 28,
            max: 55,
            min: 18,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'retirementAge',
            label: 'Retirement age (in Year)',
            defaultValue: 60,
            max: 70,
            min: 30,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'contributionPercentage',
            label: 'Contribution Percentage',
            defaultValue: 6,
            max: 50,
            min: 6,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'anualIncrementPercentage',
            label: 'Anual Increment Percentage',
            defaultValue: 5,
            max: 50,
            min: 1,
            step: 1,
            isDisabled: false,
          },
          {
            id: 3,
            title: 'rateOfInterest',
            label: 'Rate of Interest',
            defaultValue: 7.1,
            max: 10,
            min: 7.1,
            step: 1,
            isDisabled: true,
          },
        ],
      },
      formulas: {
        EPF: {
          params: [
            'monthlyInvestment',
            'currentAge',
            'retirementAge',
            'contributionPercentage',
            'anualIncrementPercentage',
            'rateOfInterest',
          ],
          formula:
            'function(monthlyInvestment, currentAge, retirementAge, contributionPercentage, anualIncrementPercentage, rateOfInterest) {   const months = (retirementAge - currentAge) * 12;   const monthlyInterestRate = rateOfInterest / 12 / 100;   let totalEmployeeContribution = 0;   let totalEmployerContribution = 0;   let balance = 0;   for (let i = 1; i <= months; i++) {       let monthlyEmployeeContribution = (monthlyInvestment * contributionPercentage) / 100;       let monthlyEmployerContribution = (monthlyInvestment * contributionPercentage) / 100;       totalEmployeeContribution += monthlyEmployeeContribution;       totalEmployerContribution += monthlyEmployerContribution;       balance += monthlyEmployeeContribution + monthlyEmployerContribution;       balance += balance * monthlyInterestRate;       if (i % 12 === 0) {           monthlyInvestment += monthlyInvestment * (anualIncrementPercentage / 100);       }   }   return {       totalEmployeeContribution: totalEmployeeContribution.toFixed(2),       totalEmployerContribution: totalEmployerContribution.toFixed(2),       totalContribution: (totalEmployeeContribution + totalEmployerContribution).toFixed(2),       interestEarned: (balance - (totalEmployeeContribution + totalEmployerContribution)).toFixed(2),       totalAmount: balance.toFixed(2)   }; } ;',
        },
        PPF: {
          params: ['annualContribution', 'timePeriod', 'rateOfInterest'],
          formula:
            'function(annualContribution, timePeriod, rateOfInterest) {   let balance = 0;     const interestRate = rateOfInterest/ 100;  for (let year = 1; year <= timePeriod; year++) {         balance += annualContribution;         let interest = balance * interestRate;         balance += interest;     }      return {         totalContribution: (annualContribution * timePeriod).toFixed(2),         interestEarned: (balance - (annualContribution * timePeriod)).toFixed(2),         totalAmount: balance.toFixed(2)     }; } ;',
        },
        GPF: {
          params: [
            'monthlyInvestment',
            'currentAge',
            'retirementAge',
            'contributionPercentage',
            'anualIncrementPercentage',
            'rateOfInterest',
          ],
          formula:
            'function(monthlyInvestment, currentAge, retirementAge, contributionPercentage, anualIncrementPercentage, rateOfInterest) {   const months = (retirementAge - currentAge) * 12;   const monthlyInterestRate = rateOfInterest / 12 / 100;   let totalEmployeeContribution = 0;   let totalEmployerContribution = 0;   let balance = 0;   for (let i = 1; i <= months; i++) {       let monthlyEmployeeContribution = (monthlyInvestment * contributionPercentage) / 100;       let monthlyEmployerContribution = (monthlyInvestment * contributionPercentage) / 100;       totalEmployeeContribution += monthlyEmployeeContribution;       totalEmployerContribution += monthlyEmployerContribution;       balance += monthlyEmployeeContribution + monthlyEmployerContribution;       balance += balance * monthlyInterestRate;       if (i % 12 === 0) {           monthlyInvestment += monthlyInvestment * (anualIncrementPercentage / 100);       }   }   return {       totalEmployeeContribution: totalEmployeeContribution.toFixed(2),       totalEmployerContribution: totalEmployerContribution.toFixed(2),       totalContribution: (totalEmployeeContribution + totalEmployerContribution).toFixed(2),       interestEarned: (balance - (totalEmployeeContribution + totalEmployerContribution)).toFixed(2),       totalAmount: balance.toFixed(2)   }; } ;',
        },
      },
      results: {
        EPF: [
          {
            params: ['totalContribution'],
            title: 'Total Contribution',
            lebel: 'totalContribution',
            color: 'warning',
            formula: 'totalContribution',
            isGraph: true,
          },
          {
            params: ['interestEarned'],
            title: 'interest Earned',
            lebel: 'interestEarned',
            color: 'good',
            formula: 'interestEarned',
            isGraph: true,
          },
          {
            params: ['maturityAmount'],
            title: 'Maturity amount',
            lebel: 'totalAmount',
            color: '',
            formula: 'maturityAmount',
            isGraph: false,
          },
        ],
        PPF: [
          {
            params: ['totalContribution'],
            title: 'Total Contribution',
            lebel: 'totalContribution',
            color: 'warning',
            formula: 'totalContribution',
            isGraph: true,
          },
          {
            params: ['interestEarned'],
            title: 'interest Earned',
            lebel: 'interestEarned',
            color: 'good',
            formula: 'interestEarned',
            isGraph: true,
          },
          {
            params: ['maturityAmount'],
            title: 'Maturity amount',
            lebel: 'totalAmount',
            color: '',
            formula: 'maturityAmount',
            isGraph: false,
          },
        ],
        GPF: [
          {
            params: ['totalContribution'],
            title: 'Total Contribution',
            lebel: 'totalContribution',
            color: 'warning',
            formula: 'totalContribution',
            isGraph: true,
          },
          {
            params: ['interestEarned'],
            title: 'interest Earned',
            lebel: 'interestEarned',
            color: 'good',
            formula: 'interestEarned',
            isGraph: true,
          },
          {
            params: ['maturityAmount'],
            title: 'Maturity amount',
            lebel: 'totalAmount',
            color: '',
            formula: 'maturityAmount',
            isGraph: false,
          },
        ],
      },
    },
  },
];
