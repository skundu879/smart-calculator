import { CardProps } from '@/interface/cardProps';
import { title } from 'process';

export const cardDetailsObj: Array<CardProps> = [
  {
    cardTitle: 'MF',
    cardDescription: 'Mutual Fund',
    cardContent:
      'Estimate your future SIP accumulation considering investment amount,interest rate, and investment period.',
    cardIcon: 'undraw_savings_re_eq4w.svg',
    cardUrl: '/MF',
    calculationDetails: {
      tabsList: ['SIP', 'LUMPSUM'],
      inputFields: {
        SIP: [
          {
            id: 1,
            title: 'investment',
            label: 'Monthly Investment',
            defaultValue: 5000,
            max: 100000,
            min: 500,
            step: 500,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This refers to the specific amount you contribute towards your SIP each month in indian rupees.',
            inputType: 'slider',
          },
          {
            id: 2,
            title: 'monthlyInterestRate',
            label: 'Expected return % (per year)',
            defaultValue: 12,
            max: 50,
            min: 1,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the expected annual return rate on your mutual fund investment.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'months',
            label: 'Time Period (in Year)',
            defaultValue: 5,
            max: 60,
            min: 0.5,
            step: 0.5,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the total duration for which you will be investing in the mutual fund.',
            inputType: 'slider',
          },
        ],
        LUMPSUM: [
          {
            id: 1,
            title: 'principal',
            label: 'Total Investment',
            defaultValue: 100000,
            max: 1000000,
            step: 1000,
            min: 500,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              "This is the total lump sum amount you're considering investing in the mutual fund all at once in indian rupees.",
            inputType: 'slider',
          },
          {
            id: 2,
            title: 'decimalRate',
            label: 'Expected return rate (per year)',
            defaultValue: 12,
            max: 50,
            step: 1,
            min: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the expected annual return rate on your mutual fund investment.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'years',
            label: 'Time Period (in Year)',
            defaultValue: 10,
            max: 60,
            step: 0.5,
            min: 0.5,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the total duration for which you will be investing in the mutual fund.',
            inputType: 'slider',
          },
        ],
      },
      formulas: {
        SIP: {
          params: ['investment', 'monthlyInterestRate', 'months'],
          formula:
            'investment * ((Math.pow(1 + (monthlyInterestRate/100/12), (months*12)) - 1) / (monthlyInterestRate/100/12)) * (1 + (monthlyInterestRate/100/12))',
        },
        LUMPSUM: {
          params: ['principal', 'decimalRate', 'years'],
          formula: 'principal * Math.pow(1 + (decimalRate/100), years)',
        },
      },
      results: {
        SIP: {
          displayList: [
            {
              params: ['investment', 'months'],
              title: 'Principal Amount',
              lebel: 'principalAmount',
              color: 'warning',
              formula: 'investment*(months*12)',
              isGraph: true,
            },
            {
              params: ['investment', 'result', 'months'],
              title: 'Interest Earned',
              lebel: 'interestEarned',
              color: 'good',
              formula: '(result-investment*(months*12))',
              isGraph: true,
            },
            {
              params: ['investment', 'result', 'months'],
              title: 'Est. Tax',
              lebel: 'estTax',
              color: 'bad',
              formula: '(10/100)*(result-(investment*months*12)-100000)',
              isGraph: true,
            },
            {
              params: ['result', 'investment', 'months'],
              title: 'Total Amount',
              lebel: 'totalAmount',
              color: '',
              formula:
                'result-((10/100)*(result-(investment*months*12)-100000))',
              isGraph: false,
            },
          ],
        },
        LUMPSUM: {
          displayList: [
            {
              params: ['principal'],
              title: 'Invested amount',
              lebel: 'principalAmount',
              color: 'warning',
              formula: 'principal',
              isGraph: true,
            },
            {
              params: ['principal', 'result'],
              title: 'Interest Earned',
              lebel: 'interestEarned',
              color: 'good',
              formula: '(result-principal)',
              isGraph: true,
            },
            {
              params: ['principal', 'result'],
              title: 'Est. Tax',
              lebel: 'estTax',
              color: 'bad',
              formula: '(10/100)*(result-(principal)-100000)',
              isGraph: true,
            },
            {
              params: ['principal', 'result'],
              title: 'Total Amount',
              lebel: 'totalAmount',
              color: '',
              formula: 'result-((10/100)*(result-principal-100000))',
              isGraph: false,
            },
          ],
        },
      },
    },
  },
  {
    cardTitle: 'PF',
    cardDescription: 'Provident Fund',
    cardContent:
      'Calculate your future retirement corpus for EPF, PPF, or GPF with our easy-to-use tool.',
    cardIcon: 'undraw_vault.svg',
    cardUrl: '/PF',
    calculationDetails: {
      tabsList: ['EPF', 'PPF', 'GPF'],
      inputFields: {
        EPF: [
          {
            id: 1,
            title: 'monthlyInvestment',
            label: 'Monthly Basic Pay + DA',
            defaultValue: 5000,
            max: 100000,
            min: 500,
            step: 500,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the fixed amount you receive as your salary before any allowances or deductions + Dearness Allowance(DA) paid by the employer.',
            inputType: 'slider',
          },
          {
            id: 2,
            title: 'currentAge',
            label: 'Current Age (in Year)',
            defaultValue: 28,
            max: 55,
            min: 18,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This refers to your current age. It can also be used to consider your age when you began your employment.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'retirementAge',
            label: 'Retirement age (in Year)',
            defaultValue: 60,
            max: 70,
            min: 30,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the age at which you plan to retire from your employment.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'contributionPercentage',
            label: 'Contribution Percentage',
            defaultValue: 12,
            max: 50,
            min: 12,
            step: 0.5,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This indicates the percentage of your basic salary you contribute monthly to your EPF account. By law, the minimum contribution is 12% of your basic salary and dearness allowance (DA) combined.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'anualIncrementPercentage',
            label: 'Anual Increment Percentage',
            defaultValue: 5,
            max: 50,
            min: 1,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the percentage by which your monthly basic salary increases annually.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'rateOfInterest',
            label: 'Rate of Interest',
            defaultValue: 8.25,
            max: 10,
            min: 8.25,
            step: 1,
            isDisabled: true,
            isTooltip: true,
            tooltipText:
              'The interest rate for FY 2023-2024 is set by the government and applied to your EPF balance to calculate your annual earnings.',
            inputType: 'inputNumber',
          },
        ],
        PPF: [
          {
            id: 1,
            title: 'annualContribution',
            label: 'Yearly Investment (in Rupees)',
            defaultValue: 10000,
            max: 1000000,
            step: 1000,
            min: 1000,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the fixed amount you plan to invest in your PPF account annually.',
            inputType: 'slider',
          },
          {
            id: 2,
            title: 'timePeriod',
            label: 'Time Period(in year)',
            defaultValue: 15,
            max: 50,
            step: 1,
            min: 15,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the total duration for which you will be investing in the PPF account. The minimum lock-in period for a PPF account is 15 years.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'rateOfInterest',
            label: 'Rate of Interest',
            defaultValue: 7.1,
            max: 10,
            step: 0.5,
            min: 7.1,
            isDisabled: true,
            isTooltip: true,
            tooltipText:
              'The interest rate for FY 2023-2024 is set by the government and applied to your PPF balance to calculate your annual earnings.',
            inputType: 'inputNumber',
          },
        ],
        GPF: [
          {
            id: 1,
            title: 'monthlyInvestment',
            label: 'Monthly Basic Pay + DA',
            defaultValue: 5000,
            max: 100000,
            min: 500,
            step: 1000,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the fixed amount you receive as your salary before any allowances or deductions + Dearness Allowance(DA) paid by the Govt.',
            inputType: 'slider',
          },
          {
            id: 2,
            title: 'currentAge',
            label: 'Current Age (in Year)',
            defaultValue: 28,
            max: 55,
            min: 18,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This refers to your current age. It can also be used to consider your age when you began your employment.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'retirementAge',
            label: 'Retirement age (in Year)',
            defaultValue: 60,
            max: 65,
            min: 30,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This indicates your desired retirement age. The current government-mandated retirement age is 60 years, but you can choose to retire earlier.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'contributionPercentage',
            label: 'Contribution Percentage',
            defaultValue: 6,
            max: 100,
            min: 6,
            step: 0.5,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This indicates the percentage of your basic salary you contribute monthly to your GPF account. By law, the minimum contribution is 6% of your basic salary and dearness allowance (DA) combined.But you can increase it to 100% of your basic salary.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'anualIncrementPercentage',
            label: 'Anual Increment Percentage',
            defaultValue: 5,
            max: 50,
            min: 1,
            step: 1,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This is the percentage by which your monthly basic salary increases annually.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'rateOfInterest',
            label: 'Rate of Interest',
            defaultValue: 7.1,
            max: 10,
            min: 7.1,
            step: 1,
            isDisabled: true,
            isTooltip: true,
            tooltipText:
              'The interest rate for FY 2023-2024 is set by the government and applied to your GPF balance to calculate your annual earnings.',
            inputType: 'inputNumber',
          },
        ],
      },
      formulas: {
        EPF: {
          params: [
            'monthlyInvestment',
            'currentAge',
            'retirementAge',
            'contributionPercentage',
            'anualIncrementPercentage',
            'rateOfInterest',
          ],
          formula:
            'function(monthlyInvestment, currentAge, retirementAge, contributionPercentage, anualIncrementPercentage, rateOfInterest) {   const months = (retirementAge - currentAge) * 12;   const monthlyInterestRate = rateOfInterest / 12 / 100;   let totalEmployeeContribution = 0;   let totalEmployerContribution = 0;   let balance = 0;   for (let i = 1; i <= months; i++) {       let monthlyEmployeeContribution = (monthlyInvestment * contributionPercentage) / 100;       let monthlyEmployerContribution = (monthlyInvestment * contributionPercentage) / 100;       totalEmployeeContribution += monthlyEmployeeContribution;       totalEmployerContribution += monthlyEmployerContribution;       balance += monthlyEmployeeContribution + monthlyEmployerContribution;       balance += balance * monthlyInterestRate;       if (i % 12 === 0) {           monthlyInvestment += monthlyInvestment * (anualIncrementPercentage / 100);       }   }   return {       totalEmployeeContribution: totalEmployeeContribution.toFixed(2),       totalEmployerContribution: totalEmployerContribution.toFixed(2),       totalContribution: (totalEmployeeContribution + totalEmployerContribution).toFixed(2),       interestEarned: (balance - (totalEmployeeContribution + totalEmployerContribution)).toFixed(2),       totalAmount: balance.toFixed(2)   }; } ;',
        },
        PPF: {
          params: ['annualContribution', 'timePeriod', 'rateOfInterest'],
          formula:
            'function(annualContribution, timePeriod, rateOfInterest) {   let balance = 0;     const interestRate = rateOfInterest/ 100;  for (let year = 1; year <= timePeriod; year++) {         balance += annualContribution;         let interest = balance * interestRate;         balance += interest;     }      return {         totalContribution: (annualContribution * timePeriod).toFixed(2),         interestEarned: (balance - (annualContribution * timePeriod)).toFixed(2),         totalAmount: balance.toFixed(2)     }; } ;',
        },
        GPF: {
          params: [
            'monthlyInvestment',
            'currentAge',
            'retirementAge',
            'contributionPercentage',
            'anualIncrementPercentage',
            'rateOfInterest',
          ],
          formula:
            'function(monthlyInvestment, currentAge, retirementAge, contributionPercentage, anualIncrementPercentage, rateOfInterest) {   const months = (retirementAge - currentAge) * 12;   const monthlyInterestRate = rateOfInterest / 12 / 100;   let totalEmployeeContribution = 0;   let totalEmployerContribution = 0;   let balance = 0;   for (let i = 1; i <= months; i++) {       let monthlyEmployeeContribution = (monthlyInvestment * contributionPercentage) / 100;       let monthlyEmployerContribution = (monthlyInvestment * contributionPercentage) / 100;       totalEmployeeContribution += monthlyEmployeeContribution;       totalEmployerContribution += monthlyEmployerContribution;       balance += monthlyEmployeeContribution + monthlyEmployerContribution;       balance += balance * monthlyInterestRate;       if (i % 12 === 0) {           monthlyInvestment += monthlyInvestment * (anualIncrementPercentage / 100);       }   }   return {       totalEmployeeContribution: totalEmployeeContribution.toFixed(2),       totalEmployerContribution: totalEmployerContribution.toFixed(2),       totalContribution: (totalEmployeeContribution + totalEmployerContribution).toFixed(2),       interestEarned: (balance - (totalEmployeeContribution + totalEmployerContribution)).toFixed(2),       totalAmount: balance.toFixed(2)   }; } ;',
        },
      },
      results: {
        EPF: {
          displayList: [
            {
              params: ['totalContribution'],
              title: 'Total Contribution',
              lebel: 'totalContribution',
              color: 'warning',
              formula: 'totalContribution',
              isGraph: true,
            },
            {
              params: ['interestEarned'],
              title: 'interest Earned',
              lebel: 'interestEarned',
              color: 'good',
              formula: 'interestEarned',
              isGraph: true,
            },
            {
              params: ['maturityAmount'],
              title: 'Maturity amount',
              lebel: 'totalAmount',
              color: '',
              formula: 'maturityAmount',
              isGraph: false,
            },
          ],
        },
        PPF: {
          displayList: [
            {
              params: ['totalContribution'],
              title: 'Total Contribution',
              lebel: 'totalContribution',
              color: 'warning',
              formula: 'totalContribution',
              isGraph: true,
            },
            {
              params: ['interestEarned'],
              title: 'interest Earned',
              lebel: 'interestEarned',
              color: 'good',
              formula: 'interestEarned',
              isGraph: true,
            },
            {
              params: ['maturityAmount'],
              title: 'Maturity amount',
              lebel: 'totalAmount',
              color: '',
              formula: 'maturityAmount',
              isGraph: false,
            },
          ],
        },
        GPF: {
          displayList: [
            {
              params: ['totalContribution'],
              title: 'Total Contribution',
              lebel: 'totalContribution',
              color: 'warning',
              formula: 'totalContribution',
              isGraph: true,
            },
            {
              params: ['interestEarned'],
              title: 'interest Earned',
              lebel: 'interestEarned',
              color: 'good',
              formula: 'interestEarned',
              isGraph: true,
            },
            {
              params: ['maturityAmount'],
              title: 'Maturity amount',
              lebel: 'totalAmount',
              color: '',
              formula: 'maturityAmount',
              isGraph: false,
            },
          ],
        },
      },
    },
  },
  {
    cardTitle: 'SC',
    cardDescription: 'Salary Calculator',
    cardContent:
      'Find out your estimated take-home salary after considering deductions from your CTC.',
    cardIcon: 'undraw_success_factors_salary.svg',
    cardUrl: '/SC',
    calculationDetails: {
      tabsList: ['SC'],
      inputFields: {
        SC: [
          {
            id: 1,
            title: 'ctc',
            label: 'Cost to Company (CTC)',
            defaultValue: 600000,
            max: 9000000,
            min: 100000,
            step: 50000,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'This refers to the total amount a company spends on an employee in a year. This includes not only the base salary but also various benefits and employer contributions.',
            inputType: 'inputNumber',
          },
          {
            id: 2,
            title: 'bonus',
            label: 'Bonus Amount (yearly)',
            defaultValue: 50000,
            max: 1000000,
            min: 0,
            step: 10000,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'The amount mentioned in your CTC as a performance bonus is paid annually.',
            inputType: 'inputNumber',
          },
          {
            id: 3,
            title: 'monthlyProfessionalTax',
            label: 'Monthly Professional Tax',
            defaultValue: 200,
            max: 5000,
            min: 0,
            step: 50,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'A small, state-imposed tax deducted monthly from the income of professionals.',
            inputType: 'inputNumber',
          },
          {
            id: 4,
            title: 'monthlyEmployerPF',
            label: 'Monthly Employer PF ',
            defaultValue: 1800,
            max: 50000,
            min: 1200,
            step: 100,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'The amount contribution your employer makes towards your Provident Fund (PF) account.',
            inputType: 'inputNumber',
          },
          {
            id: 5,
            title: 'monthlyEmployeePF',
            label: 'Monthly Employee PF',
            defaultValue: 1800,
            max: 50000,
            min: 1200,
            step: 100,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'Your monthly employee contribution to the Provident Fund (PF).',
            inputType: 'inputNumber',
          },
          {
            id: 6,
            title: 'additionalDeduction',
            label: 'Additional Deduction (Optional)',
            defaultValue: 0,
            max: 20000,
            min: 0,
            step: 100,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'Any additional monthly deductions you may have, such as health insurance premiums or a car loan EMI.',
            inputType: 'inputNumber',
          },
        ],
      },
      formulas: {
        SC: {
          params: [
            'ctc',
            'bonus',
            'monthlyProfessionalTax',
            'monthlyEmployerPF',
            'monthlyEmployeePF',
            'additionalDeduction',
          ],
          formula:
            'function calculateTakeHomeSalary(ctc, bonus, monthlyProfessionalTax, monthlyEmployerPF, monthlyEmployeePF, additionalDeduction) {   const monthlyBonus = bonus / 12;   const annualGrossSalary = ctc - bonus;   const monthlyGrossSalary = annualGrossSalary / 12;   const MonthlyDeductions = monthlyProfessionalTax + monthlyEmployeePF + monthlyEmployerPF + additionalDeduction + monthlyBonus;   const monthlytakeHomeSalary = ctc / 12 - MonthlyDeductions;   const yearlyTakeHomeSalary = monthlytakeHomeSalary * 12;   const yearlyDeductions = MonthlyDeductions * 12;   return {monthlytakeHomeSalary, yearlyTakeHomeSalary, MonthlyDeductions, yearlyDeductions, totalAmount: monthlyGrossSalary }; }',
        },
      },
      results: {
        SC: {
          displayList: [
            {
              params: ['monthlyGrossSalary'],
              title: 'Monthly Gross Salary',
              lebel: 'totalAmount',
              color: '',
              formula: 'monthlyGrossSalary',
              isGraph: false,
            },
            {
              params: ['MonthlyDeductions'],
              title: 'Total Monthly Deductions',
              lebel: 'MonthlyDeductions',
              color: 'warning',
              formula: 'MonthlyDeductions',
              isGraph: true,
            },
            {
              params: ['monthlytakeHomeSalary'],
              title: 'Monthly Take Home Salary',
              lebel: 'monthlytakeHomeSalary',
              color: 'good',
              formula: 'monthlytakeHomeSalary',
              isGraph: true,
            },
            {
              params: ['yearlyDeductions'],
              title: 'Total Yearly Deductions',
              lebel: 'yearlyDeductions',
              color: '',
              formula: 'yearlyDeductions',
              isGraph: false,
            },
            {
              params: ['yearlyTakeHomeSalary'],
              title: 'Yearly Take Home Salary',
              lebel: 'yearlyTakeHomeSalary',
              color: '',
              formula: 'yearlyTakeHomeSalary',
              isGraph: false,
            },
          ],
        },
      },
    },
  },
  {
    cardTitle: 'EMI',
    cardDescription: 'EMI Calculator',
    cardContent: 'Calculate EMIs for home, car, personal, and other loans.',
    cardIcon: 'undraw_credit_card_payment_EMI.svg',
    cardUrl: '/EMI',
    calculationDetails: {
      tabsList: ['EMI'],
      inputFields: {
        EMI: [
          {
            id: 1,
            title: 'loanAmount',
            label: 'Loan Amount',
            defaultValue: 500000,
            max: 10000000,
            min: 10000,
            step: 5000,
            isDisabled: false,
            isTooltip: true,
            tooltipText: 'The amount you wish to borrow.',
            inputType: 'slider',
          },
          {
            id: 2,
            title: 'rateOfInterest',
            label: 'Rate of Interest (Per Annum)',
            defaultValue: 8.5,
            max: 30,
            min: 2,
            step: 0.5,
            isDisabled: false,
            isTooltip: true,
            tooltipText: 'The interest rate charged on your loan per annum.',
            inputType: 'slider',
          },
          {
            id: 3,
            title: 'loanTenure',
            label: 'Loan Tenure (in Years)',
            defaultValue: 5,
            max: 30,
            min: 1,
            step: 0.5,
            isDisabled: false,
            isTooltip: true,
            tooltipText:
              'The total time period over which you will repay the loan.',
            inputType: 'slider',
          },
        ],
      },
      formulas: {
        EMI: {
          params: ['loanAmount', 'rateOfInterest', 'loanTenure'],
          formula:
            'function generateAmortizationSchedule(loanAmount, rateOfInterest, loanTenure) {   const monthlyInterestRate = rateOfInterest / 12 / 100;   const numberOfMonths = loanTenure * 12;   const emi =     (loanAmount *       monthlyInterestRate *       Math.pow(1 + monthlyInterestRate, numberOfMonths)) /     (Math.pow(1 + monthlyInterestRate, numberOfMonths) - 1);   let balance = loanAmount;   const schedule = [];   const totalInterest = emi * numberOfMonths - loanAmount;   for (let month = 1; month <= numberOfMonths; month++) {     const interestPayment = balance * monthlyInterestRate;     const principalPayment = emi - interestPayment;     balance -= principalPayment;     schedule.push({       month: month,       emi: emi.toFixed(),       principalPayment: principalPayment.toFixed(),       interestPayment: interestPayment.toFixed(),       balance: balance < 0 ? 0 : balance.toFixed(),     });   }   return {     monthlyEMI: emi,     totalInterestpayble: totalInterest,     totalAmount: loanAmount + totalInterest,     principal: loanAmount,     schedule,   }; };',
        },
      },
      results: {
        EMI: {
          displayList: [
            {
              params: ['monthlyEMI'],
              title: 'Monthly EMI',
              lebel: 'monthlyEMI',
              color: '',
              formula: 'monthlyEMI',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['principal'],
              title: 'Principal Amount',
              lebel: 'principal',
              color: 'good',
              formula: 'principal',
              isGraph: true,
              isTable: false,
            },
            {
              params: ['totalInterestpayble'],
              title: 'Interest Payable',
              lebel: 'totalInterestpayble',
              color: 'warning',
              formula: 'totalInterestpayble',
              isGraph: true,
              isTable: false,
            },
            {
              params: ['totalAmount'],
              title: 'Total Payment',
              lebel: 'totalAmount',
              color: '',
              formula: 'totalPayment',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['schedule'],
              title: 'Monthly Scheule EMI Breakdown',
              lebel: 'schedule',
              color: '',
              formula: 'schedule',
              isGraph: false,
              isTable: true,
            },
          ],
          columns: [
            {
              accessorKey: 'month',
              header: 'Mo.',
            },
            {
              accessorKey: 'principalPayment',
              header: 'Principal Payment',
            },
            {
              accessorKey: 'interestPayment',
              header: 'Interest Payment',
            },
            {
              accessorKey: 'balance',
              header: 'Balance',
            },
          ],
        },
      },
    },
  },
  {
    cardTitle: 'Income Tax',
    cardDescription: 'Income Tax Calculator',
    cardContent: 'Easily Calculate Your Income Tax',
    cardIcon: 'undraw_financial_data_ITC.svg',
    cardUrl: '/ITC',
    calculationDetails: {
      tabsList: ['ITC'],
      accordionList: [
        {
          id: 1,
          title: 'Income Details',
        },
        {
          id: 2,
          title: 'Deductions',
        },
        {
          id: 3,
          title: 'HRA Exemption',
        },
      ],
      inputFields: {
        ITC: [
          {
            id: 2,
            title: 'age',
            label: 'Age (in Years)',
            defaultValue: 30,
            max: 100,
            min: 18,
            isDisabled: false,
            isTooltip: true,
            tooltipText: 'Your age as of 31st March of the assessment year.',
            inputType: 'inputNumber',
          },
          {
            id: 3,
            accordionId: 1,
            title: 'grossSalaryIncome',
            label: 'Gross Salary Income',
            defaultValue: 1200000,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'The total anual income you receive from your employer before any deductions.',
            inputType: 'inputNumber',
          },
          {
            id: 4,
            accordionId: 1,
            title: 'anualRentalIncome',
            label: 'Anual Rental Income',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'Any income you receive from renting out a property you own.',
            inputType: 'inputNumber',
          },
          {
            id: 5,
            accordionId: 1,
            title: 'capitalGains',
            label: 'Capital Gains',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'Any profit you make from selling a capital asset, such as property or shares.',
            inputType: 'inputNumber',
          },
          {
            id: 6,
            accordionId: 1,
            title: 'businessIncome',
            label: 'Business Income',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'Any income you receive from a business you own or operate.',
            inputType: 'inputNumber',
          },
          {
            id: 7,
            accordionId: 1,
            title: 'anualIncomeFromOtherSources',
            label: 'Anual Income From Other Sources',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'any additional income you receive from sources other than your salary, such as interest on savings accounts or rental income.',
            inputType: 'inputNumber',
          },
          {
            id: 8,
            accordionId: 2,
            title: 'basicDeductions',
            label: 'Basic Deductions (80C)',
            defaultValue: 0,
            max: 150000,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'Investments in PPF(Public Provident Fund), NSC(National Savings Certificates), ELSS(Equity Linked Saving Schemes), LIC, etc., up to ₹1,50,000.',
            inputType: 'inputNumber',
          },
          {
            id: 9,
            accordionId: 2,
            title: 'healthInsurance',
            label: 'Health Insurance Premiums (80D)',
            defaultValue: 0,
            max: 25000,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'Premiums paid for health insurance policies for yourself, your spouse, children, and parents up to ₹25,000.',
            inputType: 'inputNumber',
          },
          {
            id: 10,
            accordionId: 2,
            title: 'educationLoan',
            label: 'Education Loan Interest (80E)',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'Interest paid on education loans for yourself, your spouse, or children for an unlimited amount.',
            inputType: 'inputNumber',
          },
          {
            id: 11,
            accordionId: 2,
            title: 'donations',
            label: 'Donations To Charity (80G)',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              "Donate to eligible charitable organizations and claim a 50% tax deduction. Contributions to specific funds like the National Defence Fund or Prime Minister's Relief Fund qualify for a 100% deduction.",
            inputType: 'inputNumber',
          },
          {
            id: 12,
            accordionId: 3,
            title: 'basicPay',
            label: 'Basic Pay',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'The basic salary you receive from your employer before any allowances or deductions.',
            inputType: 'inputNumber',
          },
          {
            id: 13,
            accordionId: 3,
            title: 'hra',
            label: 'HRA Received',
            defaultValue: 0,
            max: 100000,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'The amount of House Rent Allowance (HRA) you receive from your employer.',
            inputType: 'inputNumber',
          },
          {
            id: 14,
            accordionId: 3,
            title: 'rentPaid',
            label: 'Rent Paid (Per Annum)',
            defaultValue: 0,
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'The total amount of rent you pay annually for your accommodation.',
            inputType: 'inputNumber',
          },
          {
            id: 15,
            accordionId: 3,
            title: 'location',
            label: 'Location of Residence',
            dropdownList: [
              {
                itemValue: 'Metro',
                itemLabel: 'Metro',
              },
              {
                itemValue: 'Non-Metro',
                itemLabel: 'Non-Metro',
              },
            ],
            defaultValue: 'Metro',
            isDisabled: false,
            isTooltip: true,
            isAccordion: true,
            tooltipText:
              'The city in which you reside. This determines the HRA exemption you are eligible for.',
            inputType: 'InputDropdown',
          },
        ],
      },
      formulas: {
        ITC: {
          params: [
            'age',
            'grossSalaryIncome',
            'anualRentalIncome',
            'capitalGains',
            'businessIncome',
            'anualIncomeFromOtherSources',
            'basicDeductions',
            'healthInsurance',
            'educationLoan',
            'donations',
            'basicPay',
            'hra',
            'rentPaid',
            'location',
          ],
          formula:
            "function calculateIncomeTax(   age,   grossSalaryIncome,   anualRentalIncome,   capitalGains,   businessIncome,   anualIncomeFromOtherSources,   basicDeductions,   healthInsurance,   educationLoan,   donations,   basicPay,   hra,   rentPaid,   location ) {   function calculateHRAExemption({     actualHRAReceived,     basicSalary,     rentPaid,     isMetro,   }) {     let metroAllowance = isMetro ? 0.5 * basicSalary : 0.4 * basicSalary;     let rentExcess = rentPaid - 0.1 * basicSalary;     let hraExemption = Math.min(actualHRAReceived, metroAllowance, rentExcess);     return hraExemption;   }    function calculateTaxOldRegime(income, age) {     let tax = 0;     if (age < 60) {       if (income <= 250000) {         tax = 0;       } else if (income <= 500000) {         tax = (income - 250000) * 0.05;       } else if (income <= 1000000) {         tax = 12500 + (income - 500000) * 0.2;       } else {         tax = 12500 + 100000 + (income - 1000000) * 0.3;       }     } else if (age >= 60 && age < 80) {       if (income <= 300000) {         tax = 0;       } else if (income <= 500000) {         tax = (income - 300000) * 0.05;       } else if (income <= 1000000) {         tax = 10000 + (income - 500000) * 0.2;       } else {         tax = 10000 + 100000 + (income - 1000000) * 0.3;       }     } else {       if (income <= 500000) {         tax = 0;       } else if (income <= 1000000) {         tax = (income - 500000) * 0.2;       } else {         tax = 100000 + (income - 1000000) * 0.3;       }     }     return tax;   }    function calculateTaxNewRegime(income) {     let tax = 0;     if (income <= 300000) {       tax = 0;     } else if (income <= 700000) {       tax = (income - 300000) * 0.05;     } else if (income <= 1000000) {       tax = 20000 + (income - 700000) * 0.1;     } else if (income <= 1200000) {       tax = 50000 + (income - 1000000) * 0.15;     } else if (income <= 1500000) {       tax = 80000 + (income - 1200000) * 0.2;     } else {       tax = 140000 + (income - 1500000) * 0.3;     }     return tax;   }    let grossTotalIncome =     grossSalaryIncome +     anualRentalIncome +     capitalGains +     businessIncome +     anualIncomeFromOtherSources;   let netIncomeAfterExemptions =     grossTotalIncome -     calculateHRAExemption({       actualHRAReceived: hra,       basicSalary: basicPay,       rentPaid: rentPaid,       isMetro: location === 'metro',     });   let deductions =     basicDeductions - healthInsurance - educationLoan - donations;    let oldTaxableIncome = netIncomeAfterExemptions - deductions - 50000;    let newTaxableIncome = netIncomeAfterExemptions - 75000;   let oldTax;   let newTax;   oldTax = calculateTaxOldRegime(oldTaxableIncome, age);   newTax = calculateTaxNewRegime(newTaxableIncome);   let oldCess = oldTax * 0.04;   let newCess = newTax * 0.04;   let totalOldTax = oldTax + oldCess;   let totalNewTax = newTax + newCess;   return {     grossTotalIncome,     totalOldTax,     totalNewTax,     taxSaved: totalOldTax - totalNewTax,     oldTaxableIncome,     newTaxableIncome,   }; }; ",
        },
      },
      results: {
        ITC: {
          displayList: [
            {
              params: ['grossTotalIncome'],
              title: 'Gross Total Income',
              lebel: 'grossTotalIncome',
              color: '',
              formula: 'grossTotalIncome',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['oldTaxableIncome'],
              title: 'Old Taxable Income',
              lebel: 'oldTaxableIncome',
              color: '',
              formula: 'oldTaxableIncome',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['newTaxableIncome'],
              title: 'New Taxable Income',
              lebel: 'newTaxableIncome',
              color: '',
              formula: 'newTaxableIncome',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['totalOldTax'],
              title: 'Total Old Tax',
              lebel: 'totalOldTax',
              color: '',
              formula: 'totalOldTax',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['totalNewTax'],
              title: 'Total New Tax',
              lebel: 'totalNewTax',
              color: '',
              formula: 'totalNewTax',
              isGraph: false,
              isTable: false,
            },
            {
              params: ['taxSaved'],
              title: 'Tax Saved (Old - New)',
              lebel: 'taxSaved',
              color: '',
              formula: 'taxSaved',
              isGraph: false,
              isTable: false,
            },
          ],
        },
      },
    },
  },
];
